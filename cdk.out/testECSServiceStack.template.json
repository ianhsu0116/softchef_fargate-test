{
  "Resources": {
    "testVpcCB3A84F3": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.31.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/Resource"
      }
    },
    "testVpcPublicSubnet1Subnet03209D96": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.0.0/18",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/Subnet"
      }
    },
    "testVpcPublicSubnet1RouteTable937500B7": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/RouteTable"
      }
    },
    "testVpcPublicSubnet1RouteTableAssociationB0E8B01F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPublicSubnet1RouteTable937500B7"
        },
        "SubnetId": {
          "Ref": "testVpcPublicSubnet1Subnet03209D96"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/RouteTableAssociation"
      }
    },
    "testVpcPublicSubnet1DefaultRoute39318EB1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPublicSubnet1RouteTable937500B7"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "testVpcIGW8765943D"
        }
      },
      "DependsOn": [
        "testVpcVPCGWD6E219A3"
      ],
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/DefaultRoute"
      }
    },
    "testVpcPublicSubnet1EIP612BA05D": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/EIP"
      }
    },
    "testVpcPublicSubnet1NATGatewayA8682B7A": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "testVpcPublicSubnet1Subnet03209D96"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "testVpcPublicSubnet1EIP612BA05D",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet1/NATGateway"
      }
    },
    "testVpcPublicSubnet2SubnetAF6DE3CD": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.64.0/18",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet2/Subnet"
      }
    },
    "testVpcPublicSubnet2RouteTableFB8FD3DC": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet2/RouteTable"
      }
    },
    "testVpcPublicSubnet2RouteTableAssociationB8F9BBA9": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPublicSubnet2RouteTableFB8FD3DC"
        },
        "SubnetId": {
          "Ref": "testVpcPublicSubnet2SubnetAF6DE3CD"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet2/RouteTableAssociation"
      }
    },
    "testVpcPublicSubnet2DefaultRouteCF7F813D": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPublicSubnet2RouteTableFB8FD3DC"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "testVpcIGW8765943D"
        }
      },
      "DependsOn": [
        "testVpcVPCGWD6E219A3"
      ],
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PublicSubnet2/DefaultRoute"
      }
    },
    "testVpcPrivateSubnet1SubnetC039AD1B": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.128.0/18",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PrivateSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet1/Subnet"
      }
    },
    "testVpcPrivateSubnet1RouteTable63904FE4": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PrivateSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet1/RouteTable"
      }
    },
    "testVpcPrivateSubnet1RouteTableAssociation0BE0BED6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPrivateSubnet1RouteTable63904FE4"
        },
        "SubnetId": {
          "Ref": "testVpcPrivateSubnet1SubnetC039AD1B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet1/RouteTableAssociation"
      }
    },
    "testVpcPrivateSubnet1DefaultRoute8A2C8B09": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPrivateSubnet1RouteTable63904FE4"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "testVpcPublicSubnet1NATGatewayA8682B7A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet1/DefaultRoute"
      }
    },
    "testVpcPrivateSubnet2Subnet6DA9E2A0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.192.0/18",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet2/Subnet"
      }
    },
    "testVpcPrivateSubnet2RouteTable741A5013": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc/PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet2/RouteTable"
      }
    },
    "testVpcPrivateSubnet2RouteTableAssociation4486CC99": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPrivateSubnet2RouteTable741A5013"
        },
        "SubnetId": {
          "Ref": "testVpcPrivateSubnet2Subnet6DA9E2A0"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet2/RouteTableAssociation"
      }
    },
    "testVpcPrivateSubnet2DefaultRouteACC1CAB5": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "testVpcPrivateSubnet2RouteTable741A5013"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "testVpcPublicSubnet1NATGatewayA8682B7A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/PrivateSubnet2/DefaultRoute"
      }
    },
    "testVpcIGW8765943D": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "testECSServiceStack/testVpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/IGW"
      }
    },
    "testVpcVPCGWD6E219A3": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        },
        "InternetGatewayId": {
          "Ref": "testVpcIGW8765943D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testVpc/VPCGW"
      }
    },
    "testclusterDF8B0D19": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "testCluster",
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/test-cluster/Resource"
      }
    },
    "amazonecssampleLBF8E7DBED": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "amazonecssampleLBSecurityGroup55736652",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "testVpcPublicSubnet1Subnet03209D96"
          },
          {
            "Ref": "testVpcPublicSubnet2SubnetAF6DE3CD"
          }
        ],
        "Type": "application"
      },
      "DependsOn": [
        "testVpcPublicSubnet1DefaultRoute39318EB1",
        "testVpcPublicSubnet2DefaultRouteCF7F813D"
      ],
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/LB/Resource"
      }
    },
    "amazonecssampleLBSecurityGroup55736652": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB testECSServiceStackamazonecssampleLB896424C2",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/LB/SecurityGroup/Resource"
      }
    },
    "amazonecssampleLBSecurityGrouptotestECSServiceStackamazonecssampleServiceSecurityGroup695C4CD68045E70774": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "amazonecssampleLBSecurityGroup55736652",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "amazonecssampleServiceSecurityGroup120A1640",
            "GroupId"
          ]
        },
        "FromPort": 80,
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/LB/SecurityGroup/to testECSServiceStackamazonecssampleServiceSecurityGroup695C4CD6:80"
      }
    },
    "amazonecssampleLBPublicListenerDAC9D871": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "amazonecssampleLBPublicListenerECSGroup65D63633"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "amazonecssampleLBF8E7DBED"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/LB/PublicListener/Resource"
      }
    },
    "amazonecssampleLBPublicListenerECSGroup65D63633": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "ip",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/LB/PublicListener/ECSGroup/Resource"
      }
    },
    "amazonecssampleTaskDefTaskRole527DD07B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/TaskDef/TaskRole/Resource"
      }
    },
    "amazonecssampleTaskDefF37D3192": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "amazon/amazon-ecs-sample",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "amazonecssampleTaskDefwebLogGroup910AB31A"
                },
                "awslogs-stream-prefix": "testECSServiceStack",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "web",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "amazonecssampleTaskDefExecutionRoleF904F4BB",
            "Arn"
          ]
        },
        "Family": "testECSServiceStackamazonecssampleTaskDef35611AAB",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "amazonecssampleTaskDefTaskRole527DD07B",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/TaskDef/Resource"
      }
    },
    "amazonecssampleTaskDefwebLogGroup910AB31A": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 365
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/TaskDef/web/LogGroup/Resource"
      }
    },
    "amazonecssampleTaskDefExecutionRoleF904F4BB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/TaskDef/ExecutionRole/Resource"
      }
    },
    "amazonecssampleTaskDefExecutionRoleDefaultPolicyAFBFE89A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "amazonecssampleTaskDefwebLogGroup910AB31A",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "amazonecssampleTaskDefExecutionRoleDefaultPolicyAFBFE89A",
        "Roles": [
          {
            "Ref": "amazonecssampleTaskDefExecutionRoleF904F4BB"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/TaskDef/ExecutionRole/DefaultPolicy/Resource"
      }
    },
    "amazonecssampleService537E3215": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "testclusterDF8B0D19"
        },
        "DeploymentConfiguration": {
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": 80,
            "TargetGroupArn": {
              "Ref": "amazonecssampleLBPublicListenerECSGroup65D63633"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "amazonecssampleServiceSecurityGroup120A1640",
                  "GroupId"
                ]
              }
            ],
            "Subnets": [
              {
                "Ref": "testVpcPrivateSubnet1SubnetC039AD1B"
              },
              {
                "Ref": "testVpcPrivateSubnet2Subnet6DA9E2A0"
              }
            ]
          }
        },
        "TaskDefinition": {
          "Ref": "amazonecssampleTaskDefF37D3192"
        }
      },
      "DependsOn": [
        "amazonecssampleLBPublicListenerECSGroup65D63633",
        "amazonecssampleLBPublicListenerDAC9D871"
      ],
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/Service/Service"
      }
    },
    "amazonecssampleServiceSecurityGroup120A1640": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "testECSServiceStack/amazon-ecs-sample/Service/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/Service/SecurityGroup/Resource"
      }
    },
    "amazonecssampleServiceSecurityGroupfromtestECSServiceStackamazonecssampleLBSecurityGroup1DE6C9D88090F6B40A": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "amazonecssampleServiceSecurityGroup120A1640",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "amazonecssampleLBSecurityGroup55736652",
            "GroupId"
          ]
        },
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/amazon-ecs-sample/Service/SecurityGroup/from testECSServiceStackamazonecssampleLBSecurityGroup1DE6C9D8:80"
      }
    },
    "DnsNamespaceE8F044C2": {
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
      "Properties": {
        "Name": "http-api.local",
        "Vpc": {
          "Ref": "testVpcCB3A84F3"
        },
        "Description": "Private DnsNamespace for Microservices"
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/DnsNamespace/Resource"
      }
    },
    "ecstestTaskExecutionRole51F46AAA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/ecstestTaskExecutionRole/Resource"
      }
    },
    "testServiceTaskDefD6E26AD6": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ".dkr.ecr.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/ian_test-service:latest"
                ]
              ]
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "testServiceLogGroupA94CC2F0"
                },
                "awslogs-stream-prefix": "testService",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "testServiceContainer",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "testServiceTaskDefExecutionRoleB59836A7",
            "Arn"
          ]
        },
        "Family": "testECSServiceStacktestServiceTaskDefBE684818",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "ecstestTaskExecutionRole51F46AAA",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceTaskDef/Resource"
      }
    },
    "testServiceTaskDefExecutionRoleB59836A7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceTaskDef/ExecutionRole/Resource"
      }
    },
    "testServiceTaskDefExecutionRoleDefaultPolicy4CD7D394": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":repository/ian_test-service"
                  ]
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "testServiceLogGroupA94CC2F0",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testServiceTaskDefExecutionRoleDefaultPolicy4CD7D394",
        "Roles": [
          {
            "Ref": "testServiceTaskDefExecutionRoleB59836A7"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceTaskDef/ExecutionRole/DefaultPolicy/Resource"
      }
    },
    "testServiceLogGroupA94CC2F0": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/ecs/testService",
        "RetentionInDays": 731
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceLogGroup/Resource"
      }
    },
    "testServiceSecurityGroupAA456E22": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "testECSServiceStack/testServiceSecurityGroup",
        "GroupName": "testServiceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceSecurityGroup/Resource"
      }
    },
    "testServiceSecurityGroupfromtestECSServiceStackhttpapiInternalALBSecurityGroup1AA3A7B880A77EDCB3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "testServiceSecurityGroupAA456E22",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "httpapiInternalALBSecurityGroup65B6A92E",
            "GroupId"
          ]
        },
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/testServiceSecurityGroup/from testECSServiceStackhttpapiInternalALBSecurityGroup1AA3A7B8:80"
      }
    },
    "tsetService9452B187": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "testclusterDF8B0D19"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": [
          {
            "ContainerName": "testServiceContainer",
            "ContainerPort": 80,
            "TargetGroupArn": {
              "Ref": "httpapiInternalALBhttpapiListenertsetServiceTargetGroupGroupB257AA66"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "testServiceSecurityGroupAA456E22",
                  "GroupId"
                ]
              }
            ],
            "Subnets": [
              {
                "Ref": "testVpcPrivateSubnet1SubnetC039AD1B"
              },
              {
                "Ref": "testVpcPrivateSubnet2Subnet6DA9E2A0"
              }
            ]
          }
        },
        "ServiceRegistries": [
          {
            "RegistryArn": {
              "Fn::GetAtt": [
                "tsetServiceCloudmapServiceBEA1334E",
                "Arn"
              ]
            }
          }
        ],
        "TaskDefinition": {
          "Ref": "testServiceTaskDefD6E26AD6"
        }
      },
      "DependsOn": [
        "httpapiInternalALBhttpapiListenerC81CC029",
        "httpapiInternalALBhttpapiListenertsetServiceTargetGroupGroupB257AA66"
      ],
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/tsetService/Service"
      }
    },
    "tsetServiceCloudmapServiceBEA1334E": {
      "Type": "AWS::ServiceDiscovery::Service",
      "Properties": {
        "DnsConfig": {
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "A"
            }
          ],
          "NamespaceId": {
            "Fn::GetAtt": [
              "DnsNamespaceE8F044C2",
              "Id"
            ]
          },
          "RoutingPolicy": "MULTIVALUE"
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1
        },
        "Name": "testService",
        "NamespaceId": {
          "Fn::GetAtt": [
            "DnsNamespaceE8F044C2",
            "Id"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/tsetService/CloudmapService/Resource"
      }
    },
    "httpapiInternalALB0B72E2FE": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "httpapiInternalALBSecurityGroup65B6A92E",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "testVpcPrivateSubnet1SubnetC039AD1B"
          },
          {
            "Ref": "testVpcPrivateSubnet2Subnet6DA9E2A0"
          }
        ],
        "Type": "application"
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/httpapiInternalALB/Resource"
      }
    },
    "httpapiInternalALBSecurityGroup65B6A92E": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB testECSServiceStackhttpapiInternalALB643B3D69",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/httpapiInternalALB/SecurityGroup/Resource"
      }
    },
    "httpapiInternalALBSecurityGrouptotestECSServiceStacktestServiceSecurityGroupC40E927E80943146FF": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "httpapiInternalALBSecurityGroup65B6A92E",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "testServiceSecurityGroupAA456E22",
            "GroupId"
          ]
        },
        "FromPort": 80,
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/httpapiInternalALB/SecurityGroup/to testECSServiceStacktestServiceSecurityGroupC40E927E:80"
      }
    },
    "httpapiInternalALBhttpapiListenerC81CC029": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "httpapiInternalALBhttpapiListenertsetServiceTargetGroupGroupB257AA66"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "httpapiInternalALB0B72E2FE"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/httpapiInternalALB/httpapiListener/Resource"
      }
    },
    "httpapiInternalALBhttpapiListenertsetServiceTargetGroupGroupB257AA66": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/api/test/health",
        "HealthCheckTimeoutSeconds": 3,
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "ip",
        "VpcId": {
          "Ref": "testVpcCB3A84F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/httpapiInternalALB/httpapiListener/tsetServiceTargetGroupGroup/Resource"
      }
    },
    "HttpVpcLink": {
      "Type": "AWS::ApiGatewayV2::VpcLink",
      "Properties": {
        "Name": "http-api-vpclink",
        "SubnetIds": [
          {
            "Ref": "testVpcPrivateSubnet1SubnetC039AD1B"
          },
          {
            "Ref": "testVpcPrivateSubnet2Subnet6DA9E2A0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/HttpVpcLink"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/31STU/DMAz9LdyzwJBA4jjGhyYhqDrEFbmpKWZdUsVJ0VT1v5MmKyswcfLLy3NsP+dczi/k2Ql88kyVm1lNhezWDtRGBOq1Q3Uuu5dGieWbfsmWIvNFTWrtC41u4A4oN97hMxQ1HvgDt2A2isCR0d/iAdyusiE8grsHh5+wE5mlNsDDwyvt0AY8ClIn+9PChV7ft6idWKPyltzu3hrfxB7+JW4ri8x/6JWOfC9QseyWtedQfVCN8A5sBcNUvLnBN9I0zvSbMdoBabQTbp+7RtuSSj4lGMu9NuCGUVkumia4HN16MFBeQw1aYfkrHWtgR6oOiiIqSFdtWNfx7DjEj/NUR2E2vdeMeHL/HCqHDYxGTo69INjKLjdp7zFmJuTFRSXUi9pUwc0HU30/MeJecBqnJFamRbuT3f4L3Gh+hC1yA8mrY/RxK63MsTFMztjdNXDgcmTjbRI+edf49GcnbNhXGbfUC21KlB982s4v5ZWcn3ww0cx67WiLMk/xC77fVJU4AwAA"
      },
      "Metadata": {
        "aws:cdk:path": "testECSServiceStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "amazonecssampleLoadBalancerDNS70F5FECA": {
      "Value": {
        "Fn::GetAtt": [
          "amazonecssampleLBF8E7DBED",
          "DNSName"
        ]
      }
    },
    "amazonecssampleServiceURLE3D5AC2F": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "amazonecssampleLBF8E7DBED",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}